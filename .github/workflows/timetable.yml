name: Update timetable

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  scrape:
    name: Scrape timetable
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      repo-updated: ${{ steps.git-step.outputs.updated }}

    env:
      LOGIN: ${{ secrets.LOGIN }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone scraper
        uses: actions/checkout@v4
        with:
          path: scraper
          repository: mad-maids/wiut-scraper
          ref: main
          fetch-depth: 1
          token: ${{ secrets.GH }}

      - name: Install Node.js
        uses: actions/setup-node@v3

      - name: Install pnpm
        working-directory: scraper
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: scraper
        run: |
          pnpm install
          pnpm lint
          pnpm fmt

      - name: Setup playwright
        working-directory: scraper
        run: pnpx playwright install --with-deps

      - name: Install xvfb if not exists
        working-directory: scraper
        run: |
          if ! command -v xvfb-run &> /dev/null
          then
            sudo apt-get install -y xvfb
          else
            echo "xvfb already installed"
          fi

      - name: Run the scraper
        working-directory: scraper
        run: xvfb-run pnpm start

      - name: Remove old data if exists
        run: |
          if [ -d ./timetable ]; then
            rm -rf ./timetable
          else
            echo "No old data found"
          fi

      - name: Clone data repo
        run: cp -r ./scraper/data ./timetable

      - name: Remove scraper
        run: rm -rf scraper

      - name: Upload all changes to GIT
        id: git-step
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          [[ -z $(git status -uno --porcelain) ]] && echo "No updates detected, no need for push" && exit 0;
          git commit -m "update timetable $(date -u)"
          git push origin main --force
          echo "::set-output name=updated::yes"

#  upload:
#    name: Upload data to latest release
#    runs-on: ubuntu-latest
#    needs: scrape
#    if: ${{ needs.scrape.outputs.repo-updated }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          ref: "main"
#      - name: Prepare zip file
#        run: |
#          mkdir assets
#          zip --junk-paths -r assets/data.zip data
#      - name: Get release ID
#        id: getid
#        run:   |
#          rel_id=$(curl -sL -H 'Authorization: token ${{ secrets.PAT }}' https://api.github.com/repos/mad-maids/maid.felix/releases/latest | jq -r '.id')
#          echo "::set-output name=rel_id::$rel_id"
#      - name: Remove release asset
#        uses: flcdrg/remove-release-asset-action@v1.0.3
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          release_id: ${{ steps.getid.outputs.rel_id }}
#          asset_name: 'data.zip'
#      - name: Get upload URL
#        id: geturl
#        run:   |
#          upload_url=$(curl -sL -H 'Authorization: token ${{ secrets.PAT }}' https://api.github.com/repos/mad-maids/maid.felix/releases/latest | jq -r '.upload_url')
#          echo "::set-output name=upload_url::$upload_url"
#      - name: Upload release asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.geturl.outputs.upload_url }}
#          asset_path: ./assets/data.zip
#          asset_name: data.zip
#          asset_content_type: application/zip
